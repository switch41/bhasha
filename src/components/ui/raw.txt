I'll create a daily workout tracker application from scratch. Let me start by analyzing what needs to be built and then implement it step by step.

## Planning the Daily Workout Tracker

I'll create:
1. **Schema**: Workouts, exercises, and workout sessions
2. **Backend**: CRUD operations for workouts and exercises
3. **Frontend**: Landing page, dashboard, workout creation/tracking
4. **Theme**: Modern fitness-focused design with vibrant colors

Let me start with the schema and work my way up to the frontend.

CREATE FILE
```src/convex/schema.ts
import { authTables } from "@convex-dev/auth/server";
import { defineSchema, defineTable } from "convex/server";
import { Infer, v } from "convex/values";

// default user roles. can add / remove based on the project as needed
export const ROLES = {
  ADMIN: "admin",
  USER: "user",
  MEMBER: "member",
} as const;

export const roleValidator = v.union(
  v.literal(ROLES.ADMIN),
  v.literal(ROLES.USER),
  v.literal(ROLES.MEMBER),
);
export type Role = Infer<typeof roleValidator>;

// Exercise types
export const EXERCISE_TYPES = {
  STRENGTH: "strength",
  CARDIO: "cardio",
  FLEXIBILITY: "flexibility",
  BALANCE: "balance",
} as const;

export const exerciseTypeValidator = v.union(
  v.literal(EXERCISE_TYPES.STRENGTH),
  v.literal(EXERCISE_TYPES.CARDIO),
  v.literal(EXERCISE_TYPES.FLEXIBILITY),
  v.literal(EXERCISE_TYPES.BALANCE),
);
export type ExerciseType = Infer<typeof exerciseTypeValidator>;

const schema = defineSchema(
  {
    // default auth tables using convex auth.
    ...authTables, // do not remove or modify

    // the users table is the default users table that is brought in by the authTables
    users: defineTable({
      name: v.optional(v.string()), // name of the user. do not remove
      image: v.optional(v.string()), // image of the user. do not remove
      email: v.optional(v.string()), // email of the user. do not remove
      emailVerificationTime: v.optional(v.number()), // email verification time. do not remove
      isAnonymous: v.optional(v.boolean()), // is the user anonymous. do not remove

      role: v.optional(roleValidator), // role of the user. do not remove
    }).index("email", ["email"]), // index for the email. do not remove or modify

    // Exercises table - predefined exercises that users can add to workouts
    exercises: defineTable({
      name: v.string(),
      description: v.optional(v.string()),
      type: exerciseTypeValidator,
      muscleGroups: v.array(v.string()), // e.g., ["chest", "triceps"]
      instructions: v.optional(v.string()),
      imageUrl: v.optional(v.string()),
      isCustom: v.boolean(), // true if created by user, false if system default
      userId: v.optional(v.id("users")), // only set if custom exercise
    })
      .index("by_type", ["type"])
      .index("by_user", ["userId"])
      .index("by_custom", ["isCustom"]),

    // Workout templates - reusable workout plans
    workoutTemplates: defineTable({
      name: v.string(),
      description: v.optional(v.string()),
      userId: v.id("users"),
      isPublic: v.boolean(),
      estimatedDuration: v.optional(v.number()), // in minutes
      difficulty: v.optional(v.union(
        v.literal("beginner"),
        v.literal("intermediate"),
        v.literal("advanced")
      )),
    })
      .index("by_user", ["userId"])
      .index("by_public", ["isPublic"]),

    // Exercises within a workout template
    workoutTemplateExercises: defineTable({
      workoutTemplateId: v.id("workoutTemplates"),
      exerciseId: v.id("exercises"),
      order: v.number(),
      sets: v.number(),
      reps: v.optional(v.number()),
      duration: v.optional(v.number()), // in seconds for cardio/time-based
      weight: v.optional(v.number()), // in lbs/kg
      restTime: v.optional(v.number()), // in seconds
      notes: v.optional(v.string()),
    })
      .index("by_template", ["workoutTemplateId"])
      .index("by_template_and_order", ["workoutTemplateId", "order"]),

    // Workout sessions - actual completed workouts
    workoutSessions: defineTable({
      userId: v.id("users"),
      workoutTemplateId: v.optional(v.id("workoutTemplates")),
      name: v.string(),
      date: v.string(), // YYYY-MM-DD format
      startTime: v.optional(v.number()), // timestamp
      endTime: v.optional(v.number()), // timestamp
      duration: v.optional(v.number()), // in minutes
      notes: v.optional(v.string()),
      completed: v.boolean(),
    })
      .index("by_user", ["userId"])
      .index("by_user_and_date", ["userId", "date"])
      .index("by_date", ["date"]),

    // Individual exercise performances within a workout session
    workoutSessionExercises: defineTable({
      workoutSessionId: v.id("workoutSessions"),
      exerciseId: v.id("exercises"),
      order: v.number(),
      sets: v.array(v.object({
        reps: v.optional(v.number()),
        weight: v.optional(v.number()),
        duration: v.optional(v.number()), // in seconds
        completed: v.boolean(),
        restTime: v.optional(v.number()), // actual rest taken
      })),
      notes: v.optional(v.string()),
    })
      .index("by_session", ["workoutSessionId"])
      .index("by_session_and_order", ["workoutSessionId", "order"]),
  },
  {
    schemaValidation: false,
  },
);

export default schema;
```

CREATE FILE
```src/convex/exercises.ts
import { v } from "convex/values";
import { mutation, query } from "./_generated/server";
import { getCurrentUser } from "./users";

// Get all exercises (system + user's custom ones)
export const list = query({
  args: {},
  handler: async (ctx) => {
    const user = await getCurrentUser(ctx);
    if (!user) return [];

    // Get system exercises and user's custom exercises
    const systemExercises = await ctx.db
      .query("exercises")
      .withIndex("by_custom", (q) => q.eq("isCustom", false))
      .collect();

    const customExercises = await ctx.db
      .query("exercises")
      .withIndex("by_user", (q) => q.eq("userId", user._id))
      .collect();

    return [...systemExercises, ...customExercises];
  },
});

// Get exercises by type
export const listByType = query({
  args: { type: v.string() },
  handler: async (ctx, args) => {
    const user = await getCurrentUser(ctx);
    if (!user) return [];

    const exercises = await ctx.db
      .query("exercises")
      .withIndex("by_type", (q) => q.eq("type", args.type as any))
      .collect();

    // Filter to include system exercises and user's custom exercises
    return exercises.filter(ex => !ex.isCustom || ex.userId === user._id);
  },
});

// Create custom exercise
export const create = mutation({
  args: {
    name: v.string(),
    description: v.optional(v.string()),
    type: v.string(),
    muscleGroups: v.array(v.string()),
    instructions: v.optional(v.string()),
    imageUrl: v.optional(v.string()),
  },
  handler: async (ctx, args) => {
    const user = await getCurrentUser(ctx);
    if (!user) throw new Error("Must be authenticated");

    return await ctx.db.insert("exercises", {
      ...args,
      type: args.type as any,
      isCustom: true,
      userId: user._id,
    });
  },
});

// Update custom exercise
export const update = mutation({
  args: {
    id: v.id("exercises"),
    name: v.optional(v.string()),
    description: v.optional(v.string()),
    type: v.optional(v.string()),
    muscleGroups: v.optional(v.array(v.string())),
    instructions: v.optional(v.string()),
    imageUrl: v.optional(v.string()),
  },
  handler: async (ctx, args) => {
    const user = await getCurrentUser(ctx);
    if (!user) throw new Error("Must be authenticated");

    const exercise = await ctx.db.get(args.id);
    if (!exercise) throw new Error("Exercise not found");
    if (!exercise.isCustom || exercise.userId !== user._id) {
      throw new Error("Can only update your own custom exercises");
    }

    const { id, ...updates } = args;
    return await ctx.db.patch(id, {
      ...updates,
      type: updates.type as any,
    });
  },
});

// Delete custom exercise
export const remove = mutation({
  args: { id: v.id("exercises") },
  handler: async (ctx, args) => {
    const user = await getCurrentUser(ctx);
    if (!user) throw new Error("Must be authenticated");

    const exercise = await ctx.db.get(args.id);
    if (!exercise) throw new Error("Exercise not found");
    if (!exercise.isCustom || exercise.userId !== user._id) {
      throw new Error("Can only delete your own custom exercises");
    }

    await ctx.db.delete(args.id);
  },
});
```

CREATE FILE
```src/convex/workoutTemplates.ts
import { v } from "convex/values";
import { mutation, query } from "./_generated/server";
import { getCurrentUser } from "./users";

// Get user's workout templates
export const list = query({
  args: {},
  handler: async (ctx) => {
    const user = await getCurrentUser(ctx);
    if (!user) return [];

    return await ctx.db
      .query("workoutTemplates")
      .withIndex("by_user", (q) => q.eq("userId", user._id))
      .collect();
  },
});

// Get a specific workout template with exercises
export const get = query({
  args: { id: v.id("workoutTemplates") },
  handler: async (ctx, args) => {
    const user = await getCurrentUser(ctx);
    if (!user) return null;

    const template = await ctx.db.get(args.id);
    if (!template || template.userId !== user._id) return null;

    const templateExercises = await ctx.db
      .query("workoutTemplateExercises")
      .withIndex("by_template_and_order", (q) => q.eq("workoutTemplateId", args.id))
      .collect();

    // Get exercise details for each template exercise
    const exercisesWithDetails = await Promise.all(
      templateExercises.map(async (te) => {
        const exercise = await ctx.db.get(te.exerciseId);
        return {
          ...te,
          exercise,
        };
      })
    );

    return {
      ...template,
      exercises: exercisesWithDetails,
    };
  },
});

// Create workout template
export const create = mutation({
  args: {
    name: v.string(),
    description: v.optional(v.string()),
    isPublic: v.boolean(),
    estimatedDuration: v.optional(v.number()),
    difficulty: v.optional(v.string()),
  },
  handler: async (ctx, args) => {
    const user = await getCurrentUser(ctx);
    if (!user) throw new Error("Must be authenticated");

    return await ctx.db.insert("workoutTemplates", {
      ...args,
      userId: user._id,
      difficulty: args.difficulty as any,
    });
  },
});

// Add exercise to workout template
export const addExercise = mutation({
  args: {
    workoutTemplateId: v.id("workoutTemplates"),
    exerciseId: v.id("exercises"),
    sets: v.number(),
    reps: v.optional(v.number()),
    duration: v.optional(v.number()),
    weight: v.optional(v.number()),
    restTime: v.optional(v.number()),
    notes: v.optional(v.string()),
  },
  handler: async (ctx, args) => {
    const user = await getCurrentUser(ctx);
    if (!user) throw new Error("Must be authenticated");

    const template = await ctx.db.get(args.workoutTemplateId);
    if (!template || template.userId !== user._id) {
      throw new Error("Workout template not found or access denied");
    }

    // Get the next order number
    const existingExercises = await ctx.db
      .query("workoutTemplateExercises")
      .withIndex("by_template", (q) => q.eq("workoutTemplateId", args.workoutTemplateId))
      .collect();

    const order = existingExercises.length;

    const { workoutTemplateId, exerciseId, ...exerciseData } = args;
    return await ctx.db.insert("workoutTemplateExercises", {
      workoutTemplateId,
      exerciseId,
      order,
      ...exerciseData,
    });
  },
});

// Update workout template
export const update = mutation({
  args: {
    id: v.id("workoutTemplates"),
    name: v.optional(v.string()),
    description: v.optional(v.string()),
    isPublic: v.optional(v.boolean()),
    estimatedDuration: v.optional(v.number()),
    difficulty: v.optional(v.string()),
  },
  handler: async (ctx, args) => {
    const user = await getCurrentUser(ctx);
    if (!user) throw new Error("Must be authenticated");

    const template = await ctx.db.get(args.id);
    if (!template || template.userId !== user._id) {
      throw new Error("Workout template not found or access denied");
    }

    const { id, ...updates } = args;
    return await ctx.db.patch(id, {
      ...updates,
      difficulty: updates.difficulty as any,
    });
  },
});

// Delete workout template
export const remove = mutation({
  args: { id: v.id("workoutTemplates") },
  handler: async (ctx, args) => {
    const user = await getCurrentUser(ctx);
    if (!user) throw new Error("Must be authenticated");

    const template = await ctx.db.get(args.id);
    if (!template || template.userId !== user._id) {
      throw new Error("Workout template not found or access denied");
    }

    // Delete all template exercises
    const templateExercises = await ctx.db
      .query("workoutTemplateExercises")
      .withIndex("by_template", (q) => q.eq("workoutTemplateId", args.id))
      .collect();

    for (const te of templateExercises) {
      await ctx.db.delete(te._id);
    }

    // Delete the template
    await ctx.db.delete(args.id);
  },
});
```

CREATE FILE
```src/convex/workoutSessions.ts
import { v } from "convex/values";
import { mutation, query } from "./_generated/server";
import { getCurrentUser } from "./users";

// Get user's workout sessions
export const list = query({
  args: {
    limit: v.optional(v.number()),
    date: v.optional(v.string()),
  },
  handler: async (ctx, args) => {
    const user = await getCurrentUser(ctx);
    if (!user) return [];

    let query = ctx.db.query("workoutSessions").withIndex("by_user", (q) => q.eq("userId", user._id));
    
    if (args.date) {
      query = ctx.db.query("workoutSessions").withIndex("by_user_and_date", (q) => 
        q.eq("userId", user._id).eq("date", args.date)
      );
    }

    const sessions = await query.order("desc").collect();
    return args.limit ? sessions.slice(0, args.limit) : sessions;
  },
});

// Get today's workouts
export const getToday = query({
  args: {},
  handler: async (ctx) => {
    const user = await getCurrentUser(ctx);
    if (!user) return [];

    const today = new Date().toISOString().split('T')[0];
    return await ctx.db
      .query("workoutSessions")
      .withIndex("by_user_and_date", (q) => q.eq("userId", user._id).eq("date", today))
      .collect();
  },
});

// Get workout session with exercises
export const get = query({
  args: { id: v.id("workoutSessions") },
  handler: async (ctx, args) => {
    const user = await getCurrentUser(ctx);
    if (!user) return null;

    const session = await ctx.db.get(args.id);
    if (!session || session.userId !== user._id) return null;

    const sessionExercises = await ctx.db
      .query("workoutSessionExercises")
      .withIndex("by_session_and_order", (q) => q.eq("workoutSessionId", args.id))
      .collect();

    // Get exercise details for each session exercise
    const exercisesWithDetails = await Promise.all(
      sessionExercises.map(async (se) => {
        const exercise = await ctx.db.get(se.exerciseId);
        return {
          ...se,
          exercise,
        };
      })
    );

    return {
      ...session,
      exercises: exercisesWithDetails,
    };
  },
});

// Create workout session
export const create = mutation({
  args: {
    workoutTemplateId: v.optional(v.id("workoutTemplates")),
    name: v.string(),
    date: v.optional(v.string()),
    notes: v.optional(v.string()),
  },
  handler: async (ctx, args) => {
    const user = await getCurrentUser(ctx);
    if (!user) throw new Error("Must be authenticated");

    const date = args.date || new Date().toISOString().split('T')[0];

    return await ctx.db.insert("workoutSessions", {
      userId: user._id,
      workoutTemplateId: args.workoutTemplateId,
      name: args.name,
      date,
      notes: args.notes,
      completed: false,
    });
  },
});

// Start workout session
export const start = mutation({
  args: { id: v.id("workoutSessions") },
  handler: async (ctx, args) => {
    const user = await getCurrentUser(ctx);
    if (!user) throw new Error("Must be authenticated");

    const session = await ctx.db.get(args.id);
    if (!session || session.userId !== user._id) {
      throw new Error("Workout session not found or access denied");
    }

    return await ctx.db.patch(args.id, {
      startTime: Date.now(),
    });
  },
});

// Complete workout session
export const complete = mutation({
  args: { 
    id: v.id("workoutSessions"),
    notes: v.optional(v.string()),
  },
  handler: async (ctx, args) => {
    const user = await getCurrentUser(ctx);
    if (!user) throw new Error("Must be authenticated");

    const session = await ctx.db.get(args.id);
    if (!session || session.userId !== user._id) {
      throw new Error("Workout session not found or access denied");
    }

    const endTime = Date.now();
    const duration = session.startTime ? Math.round((endTime - session.startTime) / 60000) : undefined;

    return await ctx.db.patch(args.id, {
      endTime,
      duration,
      completed: true,
      notes: args.notes,
    });
  },
});

// Add exercise to workout session
export const addExercise = mutation({
  args: {
    workoutSessionId: v.id("workoutSessions"),
    exerciseId: v.id("exercises"),
    sets: v.array(v.object({
      reps: v.optional(v.number()),
      weight: v.optional(v.number()),
      duration: v.optional(v.number()),
      completed: v.boolean(),
      restTime: v.optional(v.number()),
    })),
    notes: v.optional(v.string()),
  },
  handler: async (ctx, args) => {
    const user = await getCurrentUser(ctx);
    if (!user) throw new Error("Must be authenticated");

    const session = await ctx.db.get(args.workoutSessionId);
    if (!session || session.userId !== user._id) {
      throw new Error("Workout session not found or access denied");
    }

    // Get the next order number
    const existingExercises = await ctx.db
      .query("workoutSessionExercises")
      .withIndex("by_session", (q) => q.eq("workoutSessionId", args.workoutSessionId))
      .collect();

    const order = existingExercises.length;

    const { workoutSessionId, exerciseId, ...exerciseData } = args;
    return await ctx.db.insert("workoutSessionExercises", {
      workoutSessionId,
      exerciseId,
      order,
      ...exerciseData,
    });
  },
});

// Update exercise set in workout session
export const updateExerciseSet = mutation({
  args: {
    sessionExerciseId: v.id("workoutSessionExercises"),
    setIndex: v.number(),
    setData: v.object({
      reps: v.optional(v.number()),
      weight: v.optional(v.number()),
      duration: v.optional(v.number()),
      completed: v.boolean(),
      restTime: v.optional(v.number()),
    }),
  },
  handler: async (ctx, args) => {
    const user = await getCurrentUser(ctx);
    if (!user) throw new Error("Must be authenticated");

    const sessionExercise = await ctx.db.get(args.sessionExerciseId);
    if (!sessionExercise) throw new Error("Session exercise not found");

    const session = await ctx.db.get(sessionExercise.workoutSessionId);
    if (!session || session.userId !== user._id) {
      throw new Error("Access denied");
    }

    const updatedSets = [...sessionExercise.sets];
    updatedSets[args.setIndex] = args.setData;

    return await ctx.db.patch(args.sessionExerciseId, {
      sets: updatedSets,
    });
  },
});

// Get workout stats
export const getStats = query({
  args: {
    days: v.optional(v.number()), // last N days
  },
  handler: async (ctx, args) => {
    const user = await getCurrentUser(ctx);
    if (!user) return null;

    const days = args.days || 30;
    const startDate = new Date();
    startDate.setDate(startDate.getDate() - days);
    const startDateStr = startDate.toISOString().split('T')[0];

    const sessions = await ctx.db
      .query("workoutSessions")
      .withIndex("by_user", (q) => q.eq("userId", user._id))
      .filter((q) => q.gte(q.field("date"), startDateStr))
      .collect();

    const completedSessions = sessions.filter(s => s.completed);
    const totalDuration = completedSessions.reduce((sum, s) => sum + (s.duration || 0), 0);
    const averageDuration = completedSessions.length > 0 ? totalDuration / completedSessions.length : 0;

    return {
      totalWorkouts: completedSessions.length,
      totalDuration,
      averageDuration: Math.round(averageDuration),
      workoutStreak: await calculateStreak(ctx, user._id),
    };
  },
});

// Helper function to calculate workout streak
async function calculateStreak(ctx: any, userId: string): Promise<number> {
  let streak = 0;
  let currentDate = new Date();
  
  while (true) {
    const dateStr = currentDate.toISOString().split('T')[0];
    const workouts = await ctx.db
      .query("workoutSessions")
      .withIndex("by_user_and_date", (q) => q.eq("userId", userId).eq("date", dateStr))
      .filter((q) => q.eq(q.field("completed"), true))
      .collect();
    
    if (workouts.length > 0) {
      streak++;
      currentDate.setDate(currentDate.getDate() - 1);
    } else {
      break;
    }
    
    // Prevent infinite loop
    if (streak > 365) break;
  }
  
  return streak;
}
```

CREATE FILE
```src/convex/seedData.ts
import { mutation } from "./_generated/server";

// Seed default exercises
export const seedExercises = mutation({
  args: {},
  handler: async (ctx) => {
    // Check if exercises already exist
    const existingExercises = await ctx.db.query("exercises").collect();
    if (existingExercises.length > 0) {
      return "Exercises already seeded";
    }

    const defaultExercises = [
      // Strength exercises
      {
        name: "Push-ups",
        description: "Classic bodyweight chest exercise",
        type: "strength" as const,
        muscleGroups: ["chest", "triceps", "shoulders"],
        instructions: "Start in plank position, lower body until chest nearly touches floor, push back up",
        isCustom: false,
      },
      {
        name: "Squats",
        description: "Fundamental lower body exercise",
        type: "strength" as const,
        muscleGroups: ["quadriceps", "glutes", "hamstrings"],
        instructions: "Stand with feet shoulder-width apart, lower body as if sitting back into chair, return to standing",
        isCustom: false,
      },
      {
        name: "Pull-ups",
        description: "Upper body pulling exercise",
        type: "strength" as const,
        muscleGroups: ["lats", "biceps", "rhomboids"],
        instructions: "Hang from bar with overhand grip, pull body up until chin clears bar, lower with control",
        isCustom: false,
      },
      {
        name: "Deadlifts",
        description: "Full body compound movement",
        type: "strength" as const,
        muscleGroups: ["hamstrings", "glutes", "erector spinae", "traps"],
        instructions: "Stand with feet hip-width apart, hinge at hips to lower weight, drive through heels to return to standing",
        isCustom: false,
      },
      {
        name: "Bench Press",
        description: "Upper body pressing exercise",
        type: "strength" as const,
        muscleGroups: ["chest", "triceps", "anterior deltoids"],
        instructions: "Lie on bench, lower bar to chest, press up to full arm extension",
        isCustom: false,
      },
      {
        name: "Lunges",
        description: "Single-leg lower body exercise",
        type: "strength" as const,
        muscleGroups: ["quadriceps", "glutes", "hamstrings"],
        instructions: "Step forward into lunge position, lower back knee toward ground, push back to starting position",
        isCustom: false,
      },
      
      // Cardio exercises
      {
        name: "Running",
        description: "Cardiovascular endurance exercise",
        type: "cardio" as const,
        muscleGroups: ["legs", "core"],
        instructions: "Maintain steady pace, focus on breathing and form",
        isCustom: false,
      },
      {
        name: "Cycling",
        description: "Low-impact cardio exercise",
        type: "cardio" as const,
        muscleGroups: ["quadriceps", "hamstrings", "calves"],
        instructions: "Maintain steady cadence, adjust resistance as needed",
        isCustom: false,
      },
      {
        name: "Jumping Jacks",
        description: "Full body cardio exercise",
        type: "cardio" as const,
        muscleGroups: ["full body"],
        instructions: "Jump feet apart while raising arms overhead, return to starting position",
        isCustom: false,
      },
      {
        name: "Burpees",
        description: "High-intensity full body exercise",
        type: "cardio" as const,
        muscleGroups: ["full body"],
        instructions: "Drop to push-up position, perform push-up, jump feet to hands, jump up with arms overhead",
        isCustom: false,
      },
      
      // Flexibility exercises
      {
        name: "Yoga Flow",
        description: "Dynamic stretching sequence",
        type: "flexibility" as const,
        muscleGroups: ["full body"],
        instructions: "Flow through various yoga poses, focus on breath and flexibility",
        isCustom: false,
      },
      {
        name: "Static Stretching",
        description: "Hold stretches for flexibility",
        type: "flexibility" as const,
        muscleGroups: ["full body"],
        instructions: "Hold each stretch for 15-30 seconds, breathe deeply",
        isCustom: false,
      },
      
      // Balance exercises
      {
        name: "Single Leg Stand",
        description: "Balance and stability exercise",
        type: "balance" as const,
        muscleGroups: ["core", "legs"],
        instructions: "Stand on one leg, maintain balance for specified time",
        isCustom: false,
      },
      {
        name: "Plank",
        description: "Core stability exercise",
        type: "balance" as const,
        muscleGroups: ["core", "shoulders"],
        instructions: "Hold plank position, maintain straight line from head to heels",
        isCustom: false,
      },
    ];

    for (const exercise of defaultExercises) {
      await ctx.db.insert("exercises", exercise);
    }

    return `Seeded ${defaultExercises.length} default exercises`;
  },
});
```

Now let me create the frontend components and pages:

CREATE FILE
```src/pages/Dashboard.tsx
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { useAuth } from "@/hooks/use-auth";
import { api } from "@/convex/_generated/api";
import { motion } from "framer-motion";
import { Activity, Calendar, Clock, Dumbbell, Plus, TrendingUp } from "lucide-react";
import { useQuery } from "convex/react";
import { useNavigate } from "react-router";

export default function Dashboard() {
  const { user, isLoading } = useAuth();
  const navigate = useNavigate();
  
  const todayWorkouts = useQuery(api.workoutSessions.getToday);
  const recentWorkouts = useQuery(api.workoutSessions.list, { limit: 5 });
  const workoutStats = useQuery(api.workoutStats.getStats, { days: 30 });
  const workoutTemplates = useQuery(api.workoutTemplates.list);

  if (isLoading) {
    return (
      <div className="min-h-screen flex items-center justify-center">
        <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-primary"></div>
      </div>
    );
  }

  if (!user) {
    navigate("/auth");
    return null;
  }

  return (
    <motion.div
      initial={{ opacity: 0, y: 20 }}
      animate={{ opacity: 1, y: 0 }}
      transition={{ duration: 0.5 }}
      className="min-h-screen bg-gradient-to-br from-blue-50 via-white to-purple-50 dark:from-gray-900 dark:via-gray-800 dark:to-purple-900"
    >
      <div className="container mx-auto px-4 py-8 max-w-7xl">
        {/* Header */}
        <div className="mb-8">
          <motion.h1 
            initial={{ opacity: 0, x: -20 }}
            animate={{ opacity: 1, x: 0 }}
            transition={{ delay: 0.1 }}
            className="text-3xl font-bold tracking-tight mb-2"
          >
            Welcome back, {user.name || "Athlete"}! 💪
          </motion.h1>
          <motion.p 
            initial={{ opacity: 0, x: -20 }}
            animate={{ opacity: 1, x: 0 }}
            transition={{ delay: 0.2 }}
            className="text-muted-foreground"
          >
            Ready to crush your fitness goals today?
          </motion.p>
        </div>

        {/* Stats Cards */}
        <motion.div 
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ delay: 0.3 }}
          className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8"
        >
          <Card className="border-0 shadow-lg bg-gradient-to-br from-blue-500 to-blue-600 text-white">
            <CardHeader className="pb-2">
              <CardTitle className="text-sm font-medium opacity-90">Total Workouts</CardTitle>
            </CardHeader>
            <CardContent>
              <div className="flex items-center justify-between">
                <div className="text-2xl font-bold">{workoutStats?.totalWorkouts || 0}</div>
                <Activity className="h-8 w-8 opacity-80" />
              </div>
            </CardContent>
          </Card>

          <Card className="border-0 shadow-lg bg-gradient-to-br from-green-500 to-green-600 text-white">
            <CardHeader className="pb-2">
              <CardTitle className="text-sm font-medium opacity-90">Workout Streak</CardTitle>
            </CardHeader>
            <CardContent>
              <div className="flex items-center justify-between">
                <div className="text-2xl font-bold">{workoutStats?.workoutStreak || 0} days</div>
                <TrendingUp className="h-8 w-8 opacity-80" />
              </div>
            </CardContent>
          </Card>

          <Card className="border-0 shadow-lg bg-gradient-to-br from-purple-500 to-purple-600 text-white">
            <CardHeader className="pb-2">
              <CardTitle className="text-sm font-medium opacity-90">Total Time</CardTitle>
            </CardHeader>
            <CardContent>
              <div className="flex items-center justify-between">
                <div className="text-2xl font-bold">{Math.round((workoutStats?.totalDuration || 0) / 60)}h</div>
                <Clock className="h-8 w-8 opacity-80" />
              </div>
            </CardContent>
          </Card>

          <Card className="border-0 shadow-lg bg-gradient-to-br from-orange-500 to-orange-600 text-white">
            <CardHeader className="pb-2">
              <CardTitle className="text-sm font-medium opacity-90">Avg Duration</CardTitle>
            </CardHeader>
            <CardContent>
              <div className="flex items-center justify-between">
                <div className="text-2xl font-bold">{workoutStats?.averageDuration || 0}m</div>
                <Calendar className="h-8 w-8 opacity-80" />
              </div>
            </CardContent>
          </Card>
        </motion.div>

        <div className="grid grid-cols-1 lg:grid-cols-3 gap-8">
          {/* Today's Workouts */}
          <motion.div
            initial={{ opacity: 0, x: -20 }}
            animate={{ opacity: 1, x: 0 }}
            transition={{ delay: 0.4 }}
            className="lg:col-span-2"
          >
            <Card className="border-0 shadow-lg">
              <CardHeader>
                <div className="flex items-center justify-between">
                  <div>
                    <CardTitle className="flex items-center gap-2">
                      <Calendar className="h-5 w-5 text-blue-500" />
                      Today's Workouts
                    </CardTitle>
                    <CardDescription>Your scheduled workouts for today</CardDescription>
                  </div>
                  <Button 
                    onClick={() => navigate("/workout/new")}
                    className="bg-gradient-to-r from-blue-500 to-purple-500 hover:from-blue-600 hover:to-purple-600"
                  >
                    <Plus className="h-4 w-4 mr-2" />
                    New Workout
                  </Button>
                </div>
              </CardHeader>
              <CardContent>
                {todayWorkouts && todayWorkouts.length > 0 ? (
                  <div className="space-y-4">
                    {todayWorkouts.map((workout) => (
                      <motion.div
                        key={workout._id}
                        whileHover={{ scale: 1.02 }}
                        className="p-4 rounded-lg border bg-gradient-to-r from-gray-50 to-gray-100 dark:from-gray-800 dark:to-gray-700 cursor-pointer"
                        onClick={() => navigate(`/workout/${workout._id}`)}
                      >
                        <div className="flex items-center justify-between">
                          <div>
                            <h3 className="font-semibold">{workout.name}</h3>
                            <p className="text-sm text-muted-foreground">
                              {workout.completed ? "✅ Completed" : "⏳ Pending"}
                            </p>
                          </div>
                          <Dumbbell className="h-5 w-5 text-blue-500" />
                        </div>
                      </motion.div>
                    ))}
                  </div>
                ) : (
                  <div className="text-center py-8">
                    <Dumbbell className="h-12 w-12 text-muted-foreground mx-auto mb-4" />
                    <p className="text-muted-foreground mb-4">No workouts scheduled for today</p>
                    <Button 
                      onClick={() => navigate("/workout/new")}
                      variant="outline"
                    >
                      Start Your First Workout
                    </Button>
                  </div>
                )}
              </CardContent>
            </Card>
          </motion.div>

          {/* Quick Actions */}
          <motion.div
            initial={{ opacity: 0, x: 20 }}
            animate={{ opacity: 1, x: 0 }}
            transition={{ delay: 0.5 }}
          >
            <Card className="border-0 shadow-lg">
              <CardHeader>
                <CardTitle>Quick Actions</CardTitle>
                <CardDescription>Jump into your fitness routine</CardDescription>
              </CardHeader>
              <CardContent className="space-y-3">
                <Button 
                  className="w-full justify-start bg-gradient-to-r from-green-500 to-green-600 hover:from-green-600 hover:to-green-700 text-white"
                  onClick={() => navigate("/workout/new")}
                >
                  <Plus className="h-4 w-4 mr-2" />
                  Start New Workout
                </Button>
                <Button 
                  variant="outline" 
                  className="w-full justify-start"
                  onClick={() => navigate("/templates")}
                >
                  <Dumbbell className="h-4 w-4 mr-2" />
                  Browse Templates
                </Button>
                <Button 
                  variant="outline" 
                  className="w-full justify-start"
                  onClick={() => navigate("/exercises")}
                >
                  <Activity className="h-4 w-4 mr-2" />
                  Exercise Library
                </Button>
                <Button 
                  variant="outline" 
                  className="w-full justify-start"
                  onClick={() => navigate("/history")}
                >
                  <Calendar className="h-4 w-4 mr-2" />
                  Workout History
                </Button>
              </CardContent>
            </Card>

            {/* Recent Workouts */}
            <Card className="border-0 shadow-lg mt-6">
              <CardHeader>
                <CardTitle>Recent Workouts</CardTitle>
              </CardHeader>
              <CardContent>
                {recentWorkouts && recentWorkouts.length > 0 ? (
                  <div className="space-y-3">
                    {recentWorkouts.slice(0, 3).map((workout) => (
                      <motion.div
                        key={workout._id}
                        whileHover={{ scale: 1.02 }}
                        className="p-3 rounded-lg bg-muted cursor-pointer"
                        onClick={() => navigate(`/workout/${workout._id}`)}
                      >
                        <div className="flex items-center justify-between">
                          <div>
                            <p className="font-medium text-sm">{workout.name}</p>
                            <p className="text-xs text-muted-foreground">{workout.date}</p>
                          </div>
                          <div className="text-xs text-muted-foreground">
                            {workout.duration ? `${workout.duration}m` : ""}
                          </div>
                        </div>
                      </motion.div>
                    ))}
                  </div>
                ) : (
                  <p className="text-sm text-muted-foreground text-center py-4">
                    No recent workouts
                  </p>
                )}
              </CardContent>
            </Card>
          </motion.div>
        </div>
      </div>
    </motion.div>
  );
}
```

CREATE FILE
```src/pages/Landing.tsx
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { useAuth } from "@/hooks/use-auth";
import { motion } from "framer-motion";
import { Activity, BarChart3, Calendar, Dumbbell, Target, TrendingUp, Users, Zap } from "lucide-react";
import { useNavigate } from "react-router";

export default function Landing() {
  const { isAuthenticated, isLoading } = useAuth();
  const navigate = useNavigate();

  const handleGetStarted = () => {
    if (isAuthenticated) {
      navigate("/dashboard");
    } else {
      navigate("/auth");
    }
  };

  return (
    <motion.div
      initial={{ opacity: 0 }}
      animate={{ opacity: 1 }}
      transition={{ duration: 0.5 }}
      className="min-h-screen bg-gradient-to-br from-blue-50 via-white to-purple-50 dark:from-gray-900 dark:via-gray-800 dark:to-purple-900"
    >
      {/* Navigation */}
      <nav className="container mx-auto px-4 py-6">
        <div className="flex items-center justify-between">
          <motion.div 
            initial={{ opacity: 0, x: -20 }}
            animate={{ opacity: 1, x: 0 }}
            transition={{ delay: 0.1 }}
            className="flex items-center gap-2 cursor-pointer"
            onClick={() => navigate("/")}
          >
            <div className="w-10 h-10 bg-gradient-to-br from-blue-500 to-purple-600 rounded-lg flex items-center justify-center">
              <Dumbbell className="h-6 w-6 text-white" />
            </div>
            <span className="text-xl font-bold bg-gradient-to-r from-blue-600 to-purple-600 bg-clip-text text-transparent">
              FitTracker
            </span>
          </motion.div>
          
          <motion.div
            initial={{ opacity: 0, x: 20 }}
            animate={{ opacity: 1, x: 0 }}
            transition={{ delay: 0.2 }}
          >
            {!isLoading && (
              <Button 
                onClick={handleGetStarted}
                className="bg-gradient-to-r from-blue-500 to-purple-500 hover:from-blue-600 hover:to-purple-600 text-white px-6"
              >
                {isAuthenticated ? "Dashboard" : "Get Started"}
              </Button>
            )}
          </motion.div>
        </div>
      </nav>

      {/* Hero Section */}
      <section className="container mx-auto px-4 py-20">
        <div className="text-center max-w-4xl mx-auto">
          <motion.div
            initial={{ opacity: 0, y: 30 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ delay: 0.3 }}
            className="mb-8"
          >
            <h1 className="text-5xl md:text-7xl font-bold tracking-tight mb-6">
              Track Your{" "}
              <span className="bg-gradient-to-r from-blue-600 via-purple-600 to-pink-600 bg-clip-text text-transparent">
                Fitness Journey
              </span>
            </h1>
            <p className="text-xl text-muted-foreground max-w-2xl mx-auto leading-relaxed">
              The ultimate daily workout tracker that helps you build consistency, track progress, 
              and achieve your fitness goals with personalized workout plans and detailed analytics.
            </p>
          </motion.div>

          <motion.div
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ delay: 0.5 }}
            className="flex flex-col sm:flex-row gap-4 justify-center mb-16"
          >
            <Button
              size="lg"
              onClick={handleGetStarted}
              className="bg-gradient-to-r from-blue-500 to-purple-500 hover:from-blue-600 hover:to-purple-600 text-white px-8 py-6 text-lg"
            >
              <Zap className="h-5 w-5 mr-2" />
              Start Tracking Now
            </Button>
            <Button
              size="lg"
              variant="outline"
              onClick={() => document.getElementById('features')?.scrollIntoView({ behavior: 'smooth' })}
              className="px-8 py-6 text-lg"
            >
              <Activity className="h-5 w-5 mr-2" />
              Learn More
            </Button>
          </motion.div>

          {/* Hero Image/Visual */}
          <motion.div
            initial={{ opacity: 0, scale: 0.8 }}
            animate={{ opacity: 1, scale: 1 }}
            transition={{ delay: 0.7, duration: 0.8 }}
            className="relative"
          >
            <div className="bg-gradient-to-br from-blue-100 to-purple-100 dark:from-blue-900/20 dark:to-purple-900/20 rounded-2xl p-8 shadow-2xl">
              <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
                <Card className="border-0 shadow-lg">
                  <CardHeader className="pb-2">
                    <CardTitle className="text-sm">Today's Progress</CardTitle>
                  </CardHeader>
                  <CardContent>
                    <div className="text-2xl font-bold text-green-600">3/4</div>
                    <p className="text-xs text-muted-foreground">Workouts completed</p>
                  </CardContent>
                </Card>
                <Card className="border-0 shadow-lg">
                  <CardHeader className="pb-2">
                    <CardTitle className="text-sm">Weekly Streak</CardTitle>
                  </CardHeader>
                  <CardContent>
                    <div className="text-2xl font-bold text-blue-600">12 days</div>
                    <p className="text-xs text-muted-foreground">Personal best!</p>
                  </CardContent>
                </Card>
                <Card className="border-0 shadow-lg">
                  <CardHeader className="pb-2">
                    <CardTitle className="text-sm">Total Time</CardTitle>
                  </CardHeader>
                  <CardContent>
                    <div className="text-2xl font-bold text-purple-600">45m</div>
                    <p className="text-xs text-muted-foreground">This week</p>
                  </CardContent>
                </Card>
              </div>
            </div>
          </motion.div>
        </div>
      </section>

      {/* Features Section */}
      <section id="features" className="container mx-auto px-4 py-20">
        <motion.div
          initial={{ opacity: 0, y: 30 }}
          whileInView={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.6 }}
          viewport={{ once: true }}
          className="text-center mb-16"
        >
          <h2 className="text-4xl font-bold tracking-tight mb-4">
            Everything You Need to{" "}
            <span className="bg-gradient-to-r from-blue-600 to-purple-600 bg-clip-text text-transparent">
              Stay Motivated
            </span>
          </h2>
          <p className="text-xl text-muted-foreground max-w-2xl mx-auto">
            Powerful features designed to help you build lasting fitness habits and track your progress
          </p>
        </motion.div>

        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8">
          {[
            {
              icon: Calendar,
              title: "Daily Tracking",
              description: "Log your workouts daily and build consistent habits with our intuitive tracking system",
              color: "from-blue-500 to-blue-600"
            },
            {
              icon: Dumbbell,
              title: "Exercise Library",
              description: "Access hundreds of exercises with detailed instructions and create custom workouts",
              color: "from-green-500 to-green-600"
            },
            {
              icon: BarChart3,
              title: "Progress Analytics",
              description: "Visualize your progress with detailed charts and insights about your fitness journey",
              color: "from-purple-500 to-purple-600"
            },
            {
              icon: Target,
              title: "Goal Setting",
              description: "Set and track personal fitness goals with milestone celebrations and achievements",
              color: "from-orange-500 to-orange-600"
            },
            {
              icon: TrendingUp,
              title: "Streak Tracking",
              description: "Build momentum with workout streaks and stay motivated with progress milestones",
              color: "from-pink-500 to-pink-600"
            },
            {
              icon: Users,
              title: "Workout Templates",
              description: "Choose from pre-built workout templates or create your own personalized routines",
              color: "from-indigo-500 to-indigo-600"
            }
          ].map((feature, index) => (
            <motion.div
              key={feature.title}
              initial={{ opacity: 0, y: 30 }}
              whileInView={{ opacity: 1, y: 0 }}
              transition={{ duration: 0.6, delay: index * 0.1 }}
              viewport={{ once: true }}
            >
              <Card className="border-0 shadow-lg hover:shadow-xl transition-all duration-300 h-full">
                <CardHeader>
                  <div className={`w-12 h-12 rounded-lg bg-gradient-to-br ${feature.color} flex items-center justify-center mb-4`}>
                    <feature.icon className="h-6 w-6 text-white" />
                  </div>
                  <CardTitle className="text-xl">{feature.title}</CardTitle>
                </CardHeader>
                <CardContent>
                  <CardDescription className="text-base leading-relaxed">
                    {feature.description}
                  </CardDescription>
                </CardContent>
              </Card>
            </motion.div>
          ))}
        </div>
      </section>

      {/* CTA Section */}
      <section className="container mx-auto px-4 py-20">
        <motion.div
          initial={{ opacity: 0, y: 30 }}
          whileInView={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.6 }}
          viewport={{ once: true }}
          className="text-center bg-gradient-to-br from-blue-600 to-purple-600 rounded-3xl p-12 text-white"
        >
          <h2 className="text-4xl font-bold mb-4">Ready to Transform Your Fitness?</h2>
          <p className="text-xl opacity-90 mb-8 max-w-2xl mx-auto">
            Join thousands of users who have already started their fitness journey with FitTracker. 
            Start tracking your workouts today and see the difference consistency makes.
          </p>
          <Button
            size="lg"
            onClick={handleGetStarted}
            className="bg-white text-blue-600 hover:bg-gray-100 px-8 py-6 text-lg font-semibold"
          >
            <Zap className="h-5 w-5 mr-2" />
            {isAuthenticated ? "Go to Dashboard" : "Start Free Today"}
          </Button>
        </motion.div>
      </section>

      {/* Footer */}
      <footer className="container mx-auto px-4 py-8 border-t">
        <div className="flex flex-col md:flex-row items-center justify-between">
          <div className="flex items-center gap-2 mb-4 md:mb-0">
            <div className="w-8 h-8 bg-gradient-to-br from-blue-500 to-purple-600 rounded-lg flex items-center justify-center">
              <Dumbbell className="h-4 w-4 text-white" />
            </div>
            <span className="font-semibold">FitTracker</span>
          </div>
          <div className="text-sm text-muted-foreground">
            Built with ❤️ for fitness enthusiasts
          </div>
        </div>
      </footer>
    </motion.div>
  );
}
```

CREATE FILE
```src/pages/NotFound.tsx
import { Button } from "@/components/ui/button";
import { motion } from "framer-motion";
import { Home, Search } from "lucide-react";
import { useNavigate } from "react-router";

export default function NotFound() {
  const navigate = useNavigate();

  return (
    <motion.div
      initial={{ opacity: 0 }}
      animate={{ opacity: 1 }}
      transition={{ duration: 0.5 }}
      className="min-h-screen flex flex-col items-center justify-center bg-gradient-to-br from-blue-50 via-white to-purple-50 dark:from-gray-900 dark:via-gray-800 dark:to-purple-900"
    >
      <div className="text-center max-w-md mx-auto px-4">
        <motion.div
          initial={{ scale: 0.8, opacity: 0 }}
          animate={{ scale: 1, opacity: 1 }}
          transition={{ delay: 0.2 }}
          className="mb-8"
        >
          <div className="text-8xl font-bold text-transparent bg-gradient-to-r from-blue-500 to-purple-500 bg-clip-text mb-4">
            404
          </div>
          <Search className="h-16 w-16 text-muted-foreground mx-auto mb-4" />
        </motion.div>

        <motion.div
          initial={{ y: 20, opacity: 0 }}
          animate={{ y: 0, opacity: 1 }}
          transition={{ delay: 0.4 }}
        >
          <h1 className="text-2xl font-bold mb-2">Page Not Found</h1>
          <p className="text-muted-foreground mb-8">
            The page you're looking for doesn't exist or has been moved.
          </p>

          <div className="space-y-4">
            <Button
              onClick={() => navigate("/")}
              className="w-full bg-gradient-to-r from-blue-500 to-purple-500 hover:from-blue-600 hover:to-purple-600"
            >
              <Home className="h-4 w-4 mr-2" />
              Go Home
            </Button>
            <Button
              variant="outline"
              onClick={() => navigate(-1)}
              className="w-full"
            >
              Go Back
            </Button>
          </div>
        </motion.div>
      </div>
    </motion.div>
  );
}
```

Now let me update the theme colors and main routing:

EDIT FILE
```src/index.css
/* DO NOT CHANGE */
@import "tailwindcss";
@import "tw-animate-css";
@custom-variant dark (&:is(.dark *));

/* DO NOT CHANGE */
@theme inline {
  --radius-sm: calc(var(--radius) - 4px);
  --radius-md: calc(var(--radius) - 2px);
  --radius-lg: var(--radius);
  --radius-xl: calc(var(--radius) + 4px);
  --color-background: var(--background);
  --color-foreground: var(--foreground);
  --color-card: var(--card);
  --color-card-foreground: var(--card-foreground);
  --color-popover: var(--popover);
  --color-popover-foreground: var(--popover-foreground);
  --color-primary: var(--primary);
  --color-primary-foreground: var(--primary-foreground);
  --color-secondary: var(--secondary);
  --color-secondary-foreground: var(--secondary-foreground);
  --color-muted: var(--muted);
  --color-muted-foreground: var(--muted-foreground);
  --color-accent: var(--accent);
  --color-accent-foreground: var(--accent-foreground);
  --color-destructive: var(--destructive);
  --color-border: var(--border);
  --color-input: var(--input);
  --color-ring: var(--ring);
  --color-chart-1: var(--chart-1);
  --color-chart-2: var(--chart-2);
  --color-chart-3: var(--chart-3);
  --color-chart-4: var(--chart-4);
  --color-chart-5: var(--chart-5);
  --color-sidebar: var(--sidebar);
  --color-sidebar-foreground: var(--sidebar-foreground);
  --color-sidebar-primary: var(--sidebar-primary);
  --color-sidebar-primary-foreground: var(--sidebar-primary-foreground);
  --color-sidebar-accent: var(--sidebar-accent);
  --color-sidebar-accent-foreground: var(--sidebar-accent-foreground);
  --color-sidebar-border: var(--sidebar-border);
  --color-sidebar-ring: var(--sidebar-ring);
}

/* FITNESS THEME COLORS */
:root {
  --radius: 0.75rem;
  --background: oklch(0.99 0.005 240);
  --foreground: oklch(0.15 0.02 240);
  --card: oklch(1 0 0);
  --card-foreground: oklch(0.15 0.02 240);
  --popover: oklch(1 0 0);
  --popover-foreground: oklch(0.15 0.02 240);
  --primary: oklch(0.6 0.2 240);
  --primary-foreground: oklch(0.98 0.01 240);
  --secondary: oklch(0.96 0.01 240);
  --secondary-foreground: oklch(0.2 0.02 240);
  --muted: oklch(0.96 0.01 240);
  --muted-foreground: oklch(0.5 0.02 240);
  --accent: oklch(0.94 0.02 240);
  --accent-foreground: oklch(0.2 0.02 240);
  --destructive: oklch(0.65 0.25 15);
  --border: oklch(0.9 0.01 240);
  --input: oklch(0.9 0.01 240);
  --ring: oklch(0.6 0.2 240);
  --chart-1: oklch(0.65 0.2 270);
  --chart-2: oklch(0.7 0.18 150);
  --chart-3: oklch(0.75 0.2 60);
  --chart-4: oklch(0.6 0.22 300);
  --chart-5: oklch(0.8 0.15 30);
  --sidebar: oklch(0.98 0.01 240);
  --sidebar-foreground: oklch(0.15 0.02 240);
  --sidebar-primary: oklch(0.6 0.2 240);
  --sidebar-primary-foreground: oklch(0.98 0.01 240);
  --sidebar-accent: oklch(0.94 0.02 240);
  --sidebar-accent-foreground: oklch(0.2 0.02 240);
  --sidebar-border: oklch(0.9 0.01 240);
  --sidebar-ring: oklch(0.6 0.2 240);
}

.dark {
  --background: oklch(0.08 0.01 240);
  --foreground: oklch(0.95 0.01 240);
  --card: oklch(0.12 0.01 240);
  --card-foreground: oklch(0.95 0.01 240);
  --popover: oklch(0.12 0.01 240);
  --popover-foreground: oklch(0.95 0.01 240);
  --primary: oklch(0.7 0.2 240);
  --primary-foreground: oklch(0.08 0.01 240);
  --secondary: oklch(0.18 0.01 240);
  --secondary-foreground: oklch(0.95 0.01 240);
  --muted: oklch(0.18 0.01 240);
  --muted-foreground: oklch(0.6 0.01 240);
  --accent: oklch(0.22 0.02 240);
  --accent-foreground: oklch(0.95 0.01 240);
  --destructive: oklch(0.7 0.2 15);
  --border: oklch(0.22 0.02 240);
  --input: oklch(0.22 0.02 240);
  --ring: oklch(0.7 0.2 240);
  --chart-1: oklch(0.65 0.2 270);
  --chart-2: oklch(0.7 0.18 150);
  --chart-3: oklch(0.75 0.2 60);
  --chart-4: oklch(0.6 0.22 300);
  --chart-5: oklch(0.8 0.15 30);
  --sidebar: oklch(0.12 0.01 240);
  --sidebar-foreground: oklch(0.95 0.01 240);
  --sidebar-primary: oklch(0.7 0.2 240);
  --sidebar-primary-foreground: oklch(0.08 0.01 240);
  --sidebar-accent: oklch(0.22 0.02 240);
  --sidebar-accent-foreground: oklch(0.95 0.01 240);
  --sidebar-border: oklch(0.22 0.02 240);
  --sidebar-ring: oklch(0.7 0.2 240);
}

@layer base {
  * {
    @apply border-border outline-ring/50;
  }
  body {
    @apply bg-background text-foreground;
  }
  button:not([disabled]),
  [role="button"]:not([disabled]) {
    cursor: pointer;
  }
}

/* Custom fitness theme animations */
@keyframes pulse-glow {
  0%, 100% {
    box-shadow: 0 0 20px rgba(96, 165, 250, 0.3);
  }
  50% {
    box-shadow: 0 0 30px rgba(96, 165, 250, 0.6);
  }
}

.pulse-glow {
  animation: pulse-glow 2s ease-in-out infinite;
}
```

EDIT FILE
```src/main.tsx
import { Toaster } from "@/components/ui/sonner";
import { VlyToolbar } from "../vly-toolbar-readonly.tsx";
import { InstrumentationProvider } from "@/instrumentation.tsx";
import AuthPage from "@/pages/Auth.tsx";
import Dashboard from "@/pages/Dashboard.tsx";
import { ConvexAuthProvider } from "@convex-dev/auth/react";
import { ConvexReactClient } from "convex/react";
import { StrictMode, useEffect } from "react";
import { createRoot } from "react-dom/client";
import { BrowserRouter, Route, Routes, useLocation } from "react-router";
import "./index.css";
import Landing from "./pages/Landing.tsx";
import NotFound from "./pages/NotFound.tsx";
import "./types/global.d.ts";

const convex = new ConvexReactClient(import.meta.env.VITE_CONVEX_URL as string);

function RouteSyncer() {
  const location = useLocation();
  useEffect(() => {
    window.parent.postMessage(
      { type: "iframe-route-change", path: location.pathname },
      "*",
    );
  }, [location.pathname]);

  useEffect(() => {
    function handleMessage(event: MessageEvent) {
      if (event.data?.type === "navigate") {
        if (event.data.direction === "back") window.history.back();
        if (event.data.direction === "forward") window.history.forward();
      }
    }
    window.addEventListener("message", handleMessage);
    return () => window.removeEventListener("message", handleMessage);
  }, []);

  return null;
}

createRoot(document.getElementById("root")!).render(
  <StrictMode>
    <VlyToolbar />
    <InstrumentationProvider>
      <ConvexAuthProvider client={convex}>
        <BrowserRouter>
          <RouteSyncer />
          <Routes>
            <Route path="/" element={<Landing />} />
            <Route path="/auth" element={<AuthPage redirectAfterAuth="/dashboard" />} />
            <Route path="/dashboard" element={<Dashboard />} />
            <Route path="*" element={<NotFound />} />
          </Routes>
        </BrowserRouter>
        <Toaster />
      </ConvexAuthProvider>
    </InstrumentationProvider>
  </StrictMode>,
);
```

Now let me fix the missing workoutStats reference in Dashboard and create a seed data script:

REPLACE FILE
```src/pages/Dashboard.tsx
<<<<<<< SEARCH
  const workoutStats = useQuery(api.workoutStats.getStats, { days: 30 });
=======
  const workoutStats = useQuery(api.workoutSessions.getStats, { days: 30 });
>>>>>>> REPLACE
```

Now let me run the seed data command to populate the database with default exercises: